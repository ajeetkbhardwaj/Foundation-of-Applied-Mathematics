{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Contents :</p> <ol> <li>Introduction to Numerical Linear Algebra</li> <li>Direct Methods</li> <li>Condition and Stability</li> <li>Eigenvalues Solving</li> <li>Iterative Methods</li> <li>Miscellaneous Topics</li> </ol>"},{"location":"def/Eigenvalue_and_Eigenvector/","title":"Eigen Value and Vecotr","text":"<p>Definition : Consider a square matrix \\(A=[a_{ij}]_{n{\\times}n}\\) and a nonzero vector \\(v\\) of length \\(n\\) Then there exit a scalar \\(\\lambda \\in R\\) such that \\(Av = \\lambda v\\)  . Where \\(v\\) is called eigenvector corresponding to eigenvalue \\(\\lambda\\) of matrix \\(A\\).</p> <p>Remark :  1. Linear transformation \\(T : R^n \\to R^n\\) is equivalent to the square matrix \\(A\\) of order \\(n \\times n\\). thus given a basis set of the vector space can be defined as set of eigen vectors of matrix \\(A\\) for linear transformation \\(T\\).</p> <ol> <li>Eigenvectors and eigenvalues exits in a wide range of applications  like stability and vibration analysis of dynamical systems, atomic orbits, facial recognition and matrix diagonalization.</li> </ol>"},{"location":"def/Eigenvalue_and_Eigenvector/#faddeev-leverrier-algorithm","title":"Faddeev-LeVerrier Algorithm","text":"<p>Faddeev-LeVerrier algorithm is a recursive method to calculate the coefficients of the characteristic polynomial  \\(p_A(\\lambda)=\\det (\\lambda I_n - A)\\)  of a square matrix, A. solving characteristic polynomial gives eigen values of matrix A as a roots of it and matrix polynomial of matrix A  vanishes i.e p(A) = 0 by Cayley-Hamilton Theorem. Faddeev-Le Verrier algorithm works directly with coefficients of matrix \\(A\\).</p> <p>Problem : Given a </p>"},{"location":"def/Linear_Transformations/","title":"Linear Transformations","text":"<p>Given two linear space V and W over a field F, a linear map \\(T:V\\to W\\) that preserve addition and scalar multiplication such that</p> \\[ \\begin{equation} T(\\mathbf u + \\mathbf v)=T(\\mathbf u)+T(\\mathbf v)  \\\\  \\quad T(a \\mathbf v)=aT(\\mathbf v) \\end{equation} \\] <p>or we can write in general via linear combination as</p> \\[ \\\\ \\; \\begin{equation} T(a \\mathbf u + b \\mathbf v)= T(a \\mathbf u) + T(b \\mathbf v) = aT(\\mathbf u) + bT(\\mathbf v)  \\end{equation} \\] <p>for all \\(u, v \\in V\\) and scaler \\(a, b \\in F\\)</p> <p>remark-1 : If \\(V = W\\) are the same linear space then linear map \\(T\u00a0: V \u2192 V\\) is also known as a linear operator on \\(V\\).</p> <p>remark-2 : A bijective linear map between two linear spaces  is an isomorphism because it preserves linear structure and two isomorphic linear spaces are same algebraically means we can't make any distiction between these two spaces using linear space properties.</p> <p>remark-3 : How to check wheather a linear map is isomorphic or not. If it is non-isomorphic then we find its range space(set of elements which have non-zero images) and null space(set of elements which have zero images also called kernel of T).</p>"},{"location":"pdsa/prosandcons/","title":"From Applications to Advantages and Disadvantages","text":""},{"location":"pdsa/prosandcons/#directed-graphdigraph","title":"Directed Graph(Digraph)","text":"<p>graphs that have directed edges between the nodes thus directed graph have directed edges i.e edges of graph that have direction indicated by arrow.</p> <p>Applications</p> <ol> <li>To find shortest paths</li> <li>To analyse electrical circuits</li> <li>To construct models for analysis</li> <li>To develop project schedules</li> <li>To represent relationships between indivisuals in a social network(Social Networks)</li> <li>To represent links between webpages in www.(Website Design)</li> <li>To repesent relationships between elements of a programming language like control flow of program etc(Compiler Design)</li> <li>To analyse different models</li> <li>To trace routes</li> <li>To create computational graphs for automatic differentiation to compute the gradient for training of models.</li> </ol> <p>Advantages</p> <ol> <li>Every edge represents a specific direction that provides a specific route or path.</li> <li>Route and shortest path can be traced efficiently</li> <li>Directed graph can represent asymmetric relationships, such as one-way roads or one-way friendships, which cannot be represented by an undirected graph.</li> <li>Directed graph has efficient algorithms, such as topological sort, which can be used to solve problems that are difficult or impossible to solve with an undirected graph.</li> </ol> <p>Disadvantages</p> <ol> <li>If the is an edge from u to v with an edge directed towards v we can traverse only from u to v with the help of this edge but we cannot go from v to u using this same edge.</li> <li>Directed graph can be more complex to work with than an undirected graph, due to the added complexity of handling directed edges.</li> <li>Directed graph may not be suitable for certain types of problems, such as those that require symmetric relationships.</li> <li>Directed graph can be harder to visualize than an undirected graph, since the direction of the edges must be taken into account.</li> </ol>"}]}